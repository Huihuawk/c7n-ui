{
  "title": {
    "zh": "中文分类",
    "en": "Category"
  },
  "demos": [
    {
      "filename": "basic.js",
      "title": {
        "zh": "基本用法",
        "en": "Basic Usage"
      },
      "description": {
        "zh": "简单的表格，最后一列是各种操作。\n",
        "en": "Simple table with actions.\n"
      },
      "order": 0,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "jsx.js",
      "title": {
        "zh": "JSX 风格的 API",
        "en": "JSX style API"
      },
      "description": {
        "zh": "使用 JSX 风格的 API（2.5.0 以后引入）\n\n> 这个只是一个描述 `columns` 的语法糖，所以你不能用其他组件去包裹 `Column` 和 `ColumnGroup`。\n",
        "en": "Using JSX style API (introduced in 2.5.0)\n\n> Since this is just a syntax sugar for the prop `columns`, so that you can't compose `Column` and `ColumnGroup` with other Components.\n"
      },
      "order": 1,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "row-selection.js",
      "title": {
        "zh": "可选择",
        "en": "selection"
      },
      "description": {
        "zh": "第一列是联动的选择框。\n\n> 默认点击 checkbox 触发选择行为，需要点击行触发可以参考例子：https://codesandbox.io/s/000vqw38rl\n",
        "en": "Rows can be selectable by making first column as a selectable column.\n\n> selection happens when clicking checkbox defaultly. You can see https://codesandbox.io/s/000vqw38rl if you need row-click selection behavior.\n"
      },
      "order": 2,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "row-selection-and-operation.js",
      "title": {
        "zh": "选择和操作",
        "en": "Selection and operation"
      },
      "description": {
        "zh": "选择后进行操作，完成后清空选择，通过 `rowSelection.selectedRowKeys` 来控制选中项。\n",
        "en": "To perform operations and clear selections after selecting some rows, use `rowSelection.selectedRowKeys` to control selected rows.\n\n"
      },
      "order": 3,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "row-selection-custom.js",
      "title": {
        "zh": "自定义选择项",
        "en": "Custom selection"
      },
      "description": {
        "zh": "通过 `rowSelection.selections` 自定义选择项，默认不显示下拉选项，设为 `true` 时显示默认选择项。\n",
        "en": "Use `rowSelection.selections` custom selections, default no select dropdown, show default selections via setting to `true`.\n\n"
      },
      "order": 4,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "filter-dropdown.js",
      "title": {
        "zh": "下拉菜单筛选",
        "en": "Dropdown Menu Filter"
      },
      "description": {
        "zh": "设置 `filterBar` 属性为false来显示下拉过滤菜单。\n\n对某一列数据进行筛选，使用列的 `filters` 属性来指定需要筛选菜单的列，`onFilter` 用于筛选当前数据，`filterMultiple` 用于指定多选和单选。\n",
        "en": "Set `filterBar` prop false to show dropdown menu filter.\n\nUse `filters` to generate filter menu in columns, `onFilter` to determine filtered result, and `filterMultiple` to indicate whether it's multiple or single selection.\n"
      },
      "order": 7,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "head.js",
      "title": {
        "zh": "筛选和排序",
        "en": "Filter and sorter"
      },
      "description": {
        "zh": "对某一列数据进行筛选，使用列的 `filters` 属性来指定需要筛选菜单的列，`onFilter` 用于筛选当前数据，`filterMultiple` 用于指定多选和单选。\n\n对某一列数据进行排序，通过指定列的 `sorter` 函数即可启动排序按钮。`sorter: function(a, b) { ... }`， a、b 为比较的两个列数据。\n\n使用 `defaultSortOrder` 属性，设置列的默认排序顺序。\n",
        "en": "Use `filters` to generate filter menu in columns, `onFilter` to determine filtered result, and `filterMultiple` to indicate whether it's multiple or single selection.\n\nUse `sorter` to make a column sortable. `sorter` can be a function `function(a, b) { ... }` for sorting data locally.\n\nUses `defaultSortOrder` to make a column sorted by default.\n"
      },
      "order": 7,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "reset-filter.js",
      "title": {
        "zh": "可控的筛选和排序",
        "en": "Reset filters and sorters"
      },
      "description": {
        "zh": "使用受控属性对筛选和排序状态进行控制。\n\n> 1. columns 中定义了 filteredValue 和 sortOrder 属性即视为受控模式。\n> 2. 只支持同时对一列进行排序，请保证只有一列的 sortOrder 属性是生效的。\n> 3. 务必指定 `column.key`。\n",
        "en": "Control filters and sorters by `filteredValue` and `sortOrder`.\n\n> 1. Defining `filteredValue` or `sortOrder` means that it is in the controlled mode.\n> 2. Make sure `sortOrder` is assigned for only one column.\n> 3. `column.key` is required.\n"
      },
      "order": 7,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "custom-filter-panel.js",
      "title": {
        "zh": "自定义筛选菜单",
        "en": "Customized filter panel"
      },
      "description": {
        "zh": "通过 `filterDropdown`、`filterDropdownVisible` 和 `filterDropdownVisibleChange` 定义自定义的列筛选功能，并实现一个搜索列的示例。\n",
        "en": "Implement a customized column search example via `filterDropdown`, `filterDropdownVisible` and `filterDropdownVisibleChange`.\n"
      },
      "order": 8,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "ajax.js",
      "title": {
        "zh": "远程加载数据",
        "en": "Ajax"
      },
      "description": {
        "zh": "这个例子通过简单的 ajax 读取方式，演示了如何从服务端读取并展现数据，具有筛选、排序等功能以及页面 loading 效果。开发者可以自行接入其他数据处理方式。\n\n另外，本例也展示了筛选排序功能如何交给服务端实现，列不需要指定具体的 `onFilter` 和 `sorter` 函数，而是在把筛选和排序的参数发到服务端来处理。\n\n**注意，此示例使用 [模拟接口](https://randomuser.me)，展示数据可能不准确，请打开网络面板查看请求。**\n",
        "en": "This example shows how to fetch and present data from remote server, and how to implement filtering and sorting in server side by sending related parameters to server.\n\n**Note, this example use [Mock API](https://randomuser.me) that you can look up in Network Console.**\n"
      },
      "order": 9,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "size.js",
      "title": {
        "zh": "紧凑型",
        "en": "size"
      },
      "description": {
        "zh": "三种紧凑型的列表，小型列表只用于对话框内。\n",
        "en": "Three compacted table size: `default` `large` and `small`, `small` size is used in Modal only.\n"
      },
      "order": 10,
      "height": 500,
      "ignores": ["theme1", "theme3"],
      "screenshot": ""
    },
    {
      "filename": "expand.js",
      "title": {
        "zh": "可展开",
        "en": "Expandable Row"
      },
      "description": {
        "zh": "当表格内容较多不能一次性完全展示时。\n",
        "en": "When there's too much information to show and the table can't display all at once.\n"
      },
      "order": 13,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "colspan-rowspan.js",
      "title": {
        "zh": "表格行/列合并",
        "en": "colSpan and rowSpan"
      },
      "description": {
        "zh": "表头只支持列合并，使用 column 里的 colSpan 进行设置。\n\n表格支持行/列合并，使用 render 里的单元格属性 colSpan 或者 rowSpan 设值为 0 时，设置的表格不会渲染。\n",
        "en": "Table column title supports `colSpan` that set in `column`.\n\nTable cell supports `colSpan` and `rowSpan` that set in render return object. When each of them is set to `0`, the cell will not be rendered.\n"
      },
      "order": 14,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "expand-children.js",
      "title": {
        "zh": "树形数据展示",
        "en": "Tree data"
      },
      "description": {
        "zh": "表格支持树形数据的展示，可以通过设置 `indentSize` 以控制每一层的缩进宽度。\n\n> 注：暂不支持父子数据递归关联选择。\n",
        "en": "Display tree structure data in Table, control the indent width by setting `indentSize`.\n\n> Note, no support for recursive selection of tree structure data table yet.\n"
      },
      "order": 16,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "fixed-header.js",
      "title": {
        "zh": "固定表头",
        "en": "Fixed Header"
      },
      "description": {
        "zh": "方便一页内展示大量数据。\n\n需要指定 column 的 `width` 属性，否则列头和内容可能不对齐。\n",
        "en": "Display large amounts of data in scrollable view.\n\n> Specify the width of each column if header and cell do not align properly.\n"
      },
      "order": 17,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "fixed-columns.js",
      "title": {
        "zh": "固定列",
        "en": "Fixed Columns"
      },
      "description": {
        "zh": "对于列数很多的数据，可以固定前后的列，横向滚动查看其它数据，需要和 `scroll.x` 配合使用。\n\n> 若列头与内容不对齐或出现列重复，请指定列的宽度 `width`。\n\n> 建议指定 `scroll.x` 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 `scroll.x`。\n",
        "en": "To fix some columns and scroll inside other columns, and you must set `scroll.x` meanwhile.\n\n> Specify the width of columns if header and cell do not align properly.\n\n> A fixed value which is greater than table width for `scroll.x` is recommended. The sum of unfixed columns should not greater than `scroll.x`.\n"
      },
      "order": 18,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "fixed-columns-header.js",
      "title": {
        "zh": "固定头和列",
        "en": "Fixed Columns and Header"
      },
      "description": {
        "zh": "适合同时展示有大量数据和数据列。\n\n> 若列头与内容不对齐或出现列重复，请指定列的宽度 `width`。\n\n> 建议指定 `scroll.x` 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 `scroll.x`。\n",
        "en": "A Solution for displaying large amounts of data with long columns.\n\n> Specify the width of columns if header and cell do not align properly.\n\n> A fixed value which is greater than table width for `scroll.x` is recommended. The sum of unfixed columns should not greater than `scroll.x`.\n"
      },
      "order": 19,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "grouping-columns.js",
      "title": {
        "zh": "表头分组",
        "en": "Grouping table head"
      },
      "description": {
        "zh": "`columns[n]` 可以内嵌 `children`，以渲染分组表头。\n",
        "en": "Group table head with `columns[n].children`.\n"
      },
      "order": 21,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "edit-cell.js",
      "title": {
        "zh": "可编辑单元格",
        "en": "Editable Cells"
      },
      "description": {
        "zh": "带单元格编辑功能的表格。\n",
        "en": "Table with editable cells.\n"
      },
      "order": 22,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "edit-row.js",
      "title": {
        "zh": "可编辑行",
        "en": "Editable Rows"
      },
      "description": {
        "zh": "带行编辑功能的表格。\n",
        "en": "Table with editable rows.\n"
      },
      "order": 23,
      "height": 520,
      "screenshot": ""
    },
    {
      "filename": "nested-table.js",
      "title": {
        "zh": "嵌套子表格",
        "en": "Nested tables"
      },
      "description": {
        "zh": "展示每行数据更详细的信息。\n",
        "en": "Showing more detailed info of every row.\n"
      },
      "order": 24,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "drag-sorting.js",
      "title": {
        "zh": "拖拽排序",
        "en": "Drag sorting"
      },
      "description": {
        "zh": "使用自定义元素，我们可以集成 react-dnd 来实现拖拽排序。\n",
        "en": "By using custom components, we can integrate table with react-dnd to implement drag sorting.\n"
      },
      "order": 25,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "export.js",
      "title": {
        "zh": "导出表单",
        "en": "export a report"
      },
      "description": {
        "zh": "展示一个表单的导出操作\n",
        "en": "Simple export a report\n"
      },
      "order": 26,
      "height": 500,
      "screenshot": ""
    },
    {
      "filename": "dynamic-settings.js",
      "title": {
        "zh": "动态控制表格属性",
        "en": "Dynamic Settings"
      },
      "description": {
        "zh": "选择不同配置组合查看效果。\n",
        "en": "Select different settings to see the result.\n"
      },
      "order": 27,
      "height": 620,
      "ignores": ["theme1", "theme3", "theme4"],
      "screenshot": ""
    },
    {
      "filename": "bordered.js",
      "title": {
        "zh": "带边框",
        "en": "border, title and footer"
      },
      "description": {
        "zh": "添加表格边框线，页头和页脚。\n",
        "en": "Add border, title and footer for table.\n"
      },
      "order": null,
      "height": 500,
      "screenshot": ""
    }
  ]
}
