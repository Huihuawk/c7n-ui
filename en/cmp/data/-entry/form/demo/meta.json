{
  "title": {
    "zh": "中文分类",
    "en": "Category"
  },
  "demos": [
    {
      "filename": "horizontal-login.js",
      "title": {
        "zh": "水平登录栏",
        "en": "Horizontal Login Form"
      },
      "description": {
        "zh": "水平登录栏，常用在顶部导航栏中。\n",
        "en": "Horizontal login form is often used in navigation bar.\n"
      },
      "order": 0,
      "height": 136,
      "screenshot": ""
    },
    {
      "filename": "normal-login.js",
      "title": {
        "zh": "登录框",
        "en": "Login Form"
      },
      "description": {
        "zh": "普通的登录框，可以容纳更多的元素。\n",
        "en": "Normal login form which can contain more elements.\n"
      },
      "order": 1,
      "height": 314,
      "screenshot": ""
    },
    {
      "filename": "register.js",
      "title": {
        "zh": "注册新用户",
        "en": "Registration"
      },
      "description": {
        "zh": "用户填写必须的信息以注册新用户。\n",
        "en": "Fill in this form to create a new account for you.\n"
      },
      "order": 2,
      "height": 705,
      "screenshot": ""
    },
    {
      "filename": "advanced-search.js",
      "title": {
        "zh": "高级搜索",
        "en": "Advanced search"
      },
      "description": {
        "zh": "三列栅格式的表单排列方式，常用于数据表格的高级搜索。\n\n有部分定制的样式代码，由于输入标签长度不确定，需要根据具体情况自行调整。\n",
        "en": "Three columns layout is often used for advanced searching of data table.\n\nBecause the width of label is not fixed, you may need to adjust it by customizing its style.\n"
      },
      "order": 3,
      "height": 523,
      "screenshot": ""
    },
    {
      "filename": "form-in-modal.js",
      "title": {
        "zh": "弹出层中的新建表单",
        "en": "Form in Modal to Create"
      },
      "description": {
        "zh": "当用户访问一个展示了某个列表的页面，想新建一项但又不想跳转页面时，可以用 Modal 弹出一个表单，用户填写必要信息后创建新的项。\n",
        "en": "When user visit a page with a list of items, and want to create a new item. The page can popup a form in Modal, then let user fills in the form to create an item.\n"
      },
      "order": 4,
      "height": 123,
      "screenshot": ""
    },
    {
      "filename": "dynamic-form-item.js",
      "title": {
        "zh": "动态增减表单项",
        "en": "Dynamic Form Item"
      },
      "description": {
        "zh": "动态增加、减少表单项。\n",
        "en": "Add or remove form items dynamically.\n"
      },
      "order": 5,
      "height": 207,
      "screenshot": ""
    },
    {
      "filename": "time-related-controls.js",
      "title": {
        "zh": "时间类控件",
        "en": "Time-related Controls"
      },
      "description": {
        "zh": "",
        "en": ""
      },
      "order": 6,
      "height": 528,
      "screenshot": ""
    },
    {
      "filename": "customized-form-controls.js",
      "title": {
        "zh": "自定义表单控件",
        "en": "Customized Form Controls"
      },
      "description": {
        "zh": "自定义或第三方的表单控件，也可以与 Form 组件一起使用。只要该组件遵循以下的约定：\n\n> - 提供受控属性 `value` 或其它与 [`valuePropName`](/components/form/#getFieldDecorator-参数) 的值同名的属性。\n> - 提供 `onChange` 事件或 [`trigger`](/components/form/#getFieldDecorator-参数) 的值同名的事件。\n> - 不能是函数式组件。\n",
        "en": "Customized or third-party form controls can be used in Form, too. Controls must follow these conventions:\n\n> - It has a controlled property `value` or other name which is equal to the value of [`valuePropName`](/components/form/?locale=en-US#getFieldDecorator's-parameters).\n> - It has event `onChange` or an event which name is equal to the value of [`trigger`](/components/form/?locale=en-US#getFieldDecorator's-parameters).\n> - It must be a class component.\n"
      },
      "order": 7,
      "height": 137,
      "screenshot": ""
    },
    {
      "filename": "global-state.js",
      "title": {
        "zh": "表单数据存储于上层组件",
        "en": "Store Form Data into Upper Component"
      },
      "description": {
        "zh": "通过使用 `onFieldsChange` 与 `mapPropsToFields`，可以把表单的数据存储到上层组件或者 [Redux](https://github.com/reactjs/redux)、[dva](https://github.com/dvajs/dva) 中，更多可参考 [rc-form 示例](http://react-component.github.io/form/examples/redux.html)。\n\n**注意：**`mapPropsToFields` 里面返回的表单域数据必须使用 `Form.createFormField` 包装。\n",
        "en": "We can store form data into upper component or [Redux](https://github.com/reactjs/redux) or [dva](https://github.com/dvajs/dva) by using `onFieldsChange` and `mapPropsToFields`, see more at this [rc-form demo](http://react-component.github.io/form/examples/redux.html).\n\n**Note:** You must wrap field data with `Form.createFormField` in `mapPropsToFields`.\n"
      },
      "order": 8,
      "height": 279,
      "screenshot": ""
    },
    {
      "filename": "without-form-create.js",
      "title": {
        "zh": "自行处理表单数据",
        "en": "Handle Form Data Manually"
      },
      "description": {
        "zh": "使用 `Form.create` 处理后的表单具有自动收集数据并校验的功能，但如果您不需要这个功能，或者默认的行为无法满足业务需求，可以选择不使用 `Form.create` 并自行处理数据。\n",
        "en": "`Form.create` will collect and validate form data automatically. But if you don't need this feature or the default behaviour cannot satisfy your business, you can drop `Form.create` and handle form data manually.\n"
      },
      "order": 9,
      "height": 156,
      "screenshot": ""
    },
    {
      "filename": "validate-static.js",
      "title": {
        "zh": "自定义校验",
        "en": "Customized Validation"
      },
      "description": {
        "zh": "我们提供了 `validateStatus` `help` `hasFeedback` 等属性，你可以不需要使用 `Form.create` 和 `getFieldDecorator`，自己定义校验的时机和内容。\n\n1. `validateStatus`: 校验状态，可选 'success', 'warning', 'error', 'validating'。\n2. `hasFeedback`：用于给输入框添加反馈图标。\n3. `help`：设置校验文案。\n",
        "en": "We provide properties like `validateStatus` `help` `hasFeedback` to customize your own validate status and message, without using `Form.create` and `getFieldDecorator`.\n\n1. `validateStatus`: validate status of form components which could be 'success', 'warning', 'error', 'validating'.\n2. `hasFeedback`: display feed icon of input control\n3. `help`: display validate message.\n"
      },
      "order": 10,
      "height": 836,
      "screenshot": ""
    },
    {
      "filename": "coordinated.js",
      "title": {
        "zh": "表单联动",
        "en": "Coordinated Controls"
      },
      "description": {
        "zh": "使用 `setFieldsValue` 来动态设置其他控件的值。\n",
        "en": "Use `setFieldsValue` to set other control's value programmaticly.\n"
      },
      "order": 11,
      "height": 276,
      "screenshot": ""
    },
    {
      "filename": "layout.js",
      "title": {
        "zh": "表单布局",
        "en": "Form Layout"
      },
      "description": {
        "zh": "表单有三种布局。\n",
        "en": "There are three layout for form: `horizontal`, `vertical`, `inline`.\n"
      },
      "order": 12,
      "height": 333,
      "screenshot": ""
    },
    {
      "filename": "dynamic-rule.js",
      "title": {
        "zh": "动态校验规则",
        "en": "Dynamic Rules"
      },
      "description": {
        "zh": "根据不同情况执行不同的校验规则。\n",
        "en": "Perform different check rules according to different situations.\n"
      },
      "order": 13,
      "height": 322,
      "screenshot": ""
    },
    {
      "filename": "validate-other.js",
      "title": {
        "zh": "校验其他组件",
        "en": "Other Form Controls"
      },
      "description": {
        "zh": "以上演示没有出现的表单控件对应的校验演示。\n",
        "en": "Demostration for validataion configuration for form controls which are not show in the above demos.\n"
      },
      "order": 14,
      "height": 965,
      "screenshot": ""
    }
  ]
}
